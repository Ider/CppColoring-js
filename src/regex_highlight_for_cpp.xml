<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Regular Expression for C++ Code Syntax Coloring (Version 1.0)</title>
    <link href="http://files.cnblogs.com/ider/regex_highlight_for_cpp.css" tyle="text/css" rel="stylesheet"></link>
    <script src="http://files.cnblogs.com/ider/regex_highlight_for_cpp.js" type="text/javascript"></script>
    <link rel="stylesheet" type="text/css" href="http://files.cnblogs.com/ider/codestyle.css" />
</head>
    
<body>  
<div>
    <div onclick="var con = $('Project_Info').style; if(con.display == 'none'){con.display=''; this.innerHTML='Click here to Hide Project Infomation';}else{con.display='none'; this.innerHTML='Click here to Show Project Infomation'}" style="cursor:pointer; font-weight:bold; color:#0066FF;">Click here to Show Propject Infomation</div>
    <div id="Project_Info" style="display:none;">
    
        <fieldset>
        <legend>
            Project Information
        </legend>
            <div>
                <h3>About Project</h3>
                    My purpose to build this project is for posting colorful C++ codes on website, as the color of text for programmers is really meaningful, and I also want the color for the codes would be easily changed.
                    <ul>
                        <li>
                            All syntax searching and replacing are based on regular expression
                        </li>
                        <li>
                            Using style sheet instead of inline style, so that you can create style for your codes just as you like. <a href="http://files.cnblogs.com/ider/codestyle.css" target="_blank"> Here is my css file</a>
                        </li>
                        <li>
                            HTML (light) encode would be done before any other matching action, in case the '&lt;' for tags may be encoded
                        </li>
                        <li>
                            (String) Quotes matching would be done before any other styling addtion, in case the '"' for attributes may be matched
                        </li>
                    </ul>
                    
                    Please try this project, copy your c++ codes to the text area, then click the buttons on the right below
        
            </div>
            <div>
            <h3>About Next</h3>
                I would like to add flowing new features to next version for this project:
                <ul>
                        <li>
                            Function match: search for function definitions and <del>calls</del>
                        </li>
                        <li>
                            Number match: include hex, dec, oct numbers
                        </li>
                        <li>
                            More standard library words: for now, only "std, cout, cin, iostream, endl, list, vector" matched
                        </li>
                        <li>
                            User-defined type match: class/struct/enum definition names, <del>object definitions</del>
                        </li>
                        <li>
                            Deep encode: replace all '\n' with "&lt;br/&gt;", replace mutiple white-space with "&amp;nbsp;", so that we could post codes on website without &lt;pre&gt; tag
                        </li>
                    </ul>
            </div>
            <div>
                <h3>About Me</h3>
                <a href="http://about.me/ider" target="_blank">Ider Zheng</a>, a person who wanna be a programmer.
                <div>
                    If you have any questions or advices, or you want report bugs for this project, please <a href="http://www.cnblogs.com/ider/archive/2011/07/23/regex_highlight_for_cpp_codes.html">leave your comments here</a>, or <a href="mailto:ider.cs@gmail.com">send email to me</a>.
                </div>
            </div>
        </fieldset>    
    </div>
</div>

<br/>

<fieldset>
<legend>Code Style Apply</legend>
    <table cellpadding="10" cellspacing="0" width="100%">
        <tr>
            <td>
            
                <textarea id="Codes_Content" wrap="off">
/////////////////////////////////////////////////////////////////////////////
// cast_operator_comparison.cpp                                                      
// Language:   C++                   
// Complier:    Visual Studio 2010, Xcode3.2.6 
// Platform:    MacBook Pro 2010
// Application:  none  
// Author:      Ider, Syracuse University  ider.cs@gmail.com
///////////////////////////////////////////////////////////////////////////
#include &lt;string>
#include &lt;iostream>
using namespace std;

class Parents
{
public:
	Parents(string n="Parent"){ name = n;}
	virtual ~Parents(){}

	virtual void Speak()
	{
		cout &lt;&lt; "\tI am " &lt;&lt; name &lt;&lt; ", I love my children." &lt;&lt; endl;
	}
	void Work()
	{
		cout &lt;&lt; "\tI am " &lt;&lt; name &lt;&lt;", I need to work for my family." &lt;&lt; endl;;
	}
protected:
	string name;
};

class Children : public Parents
{
public:
	Children(string n="Child"):Parents(n){ }

	virtual ~Children(){}

	virtual void Speak()
	{
		cout &lt;&lt; "\tI am " &lt;&lt; name &lt;&lt; ", I love my parents." &lt;&lt; endl;
	}
	/*
	 **Children inherit Work() method from parents,
	 **it could be treated like part-time job.
	 */
	void Study()
	{
		cout &lt;&lt; "\tI am " &lt;&lt; name &lt;&lt; ", I need to study for future." &lt;&lt; endl;;
	}
	
private:
	//string name; //Inherit "name" member from Parents
};

class Stranger 
{
public:
	Stranger(string n="stranger"){name = n;}
	virtual ~Stranger(){}

	void Self_Introduce()
	{
		cout &lt;&lt; "\tI am a stranger" &lt;&lt; endl;
	}
	void Speak()
	{
		//cout &lt;&lt; "I am a stranger" &lt;&lt; endl;
		cout &lt;&lt; "\tDo not talk to "&lt;&lt; name &lt;&lt; ", who is a stranger." &lt;&lt; endl;
	}
private:
	string name;
};

int main() {
	
	/******* cast from child class to base class *******/
	cout &lt;&lt; "dynamic_cast from child class to base class:" &lt;&lt; endl;
	Children * daughter_d = new Children("Daughter who pretend to be my mother");
	Parents * mother_d = dynamic_cast&lt;Parents*> (daughter_d); //right, cast with polymorphism
	mother_d->Speak();
	mother_d->Work();
	//mother_d->Study(); //Error, no such method
	
	cout &lt;&lt; "static_cast from child class to base class:" &lt;&lt; endl;
	Children * son_s = new Children("Son who pretend to be my father");
	Parents * father_s = static_cast&lt;Parents*> (son_s); //right, cast with polymorphism
	father_s->Speak();	
	father_s->Work();
	//father_s->Study(); //Error, no such method
	
	cout &lt;&lt; endl;
	
	/******* cast from base class to child class *******/	
	cout &lt;&lt; "dynamic_cast from base class to child class:" &lt;&lt; endl;
	Parents * father_d = new Parents("Father who pretend to be a my son");
	Children * son_d = dynamic_cast&lt;Children*> (father_d); //no error, but not safe
	if (son_d)
	{
		son_d->Speak();
		son_d->Study();
	}
	else cout &lt;&lt; "\t[null]" &lt;&lt; endl;
	
	cout &lt;&lt; "static_cast from base class to child class:" &lt;&lt; endl;
	Parents * mother_s = new Parents("Mother who pretend to be a my daugher");
	Children * daughter_s = static_cast&lt;Children*> (mother_s);  //no error, but not safe
	if (daughter_s)
	{
		daughter_s->Speak();
		daughter_s->Study();
	}
	else cout &lt;&lt; "\t[null]" &lt;&lt; endl;
	
	cout &lt;&lt; endl;
	
	/******* cast between non-related class *******/	
	cout &lt;&lt; "dynamic_cast to non-related class:" &lt;&lt; endl;
	Stranger* stranger_d = dynamic_cast&lt;Stranger*> (daughter_d);
	if (stranger_d)
	{
		stranger_d->Self_Introduce();
		stranger_d->Speak();	
	}
	else cout &lt;&lt;"\t[null]"&lt;&lt;endl;
	
	//Stranger* stranger_s = static_cast&lt;Stranger*> (son_s);    //Error, invalid cast
	
	cout &lt;&lt; "reinterpret_cast to non-related class:" &lt;&lt; endl;
	Stranger* stranger_r = reinterpret_cast&lt;Stranger*> (son_s);
	if (stranger_r)
	{
		stranger_d->Self_Introduce();
		//stranger_d->Speak();	//This line would cause program crush,
		//as "name" could not be found corretly.
	}
	else cout &lt;&lt; "\t[null]" &lt;&lt; endl;

	cout &lt;&lt; endl;
	
	/******* cast back*******/
	cout &lt;&lt; "use dynamic_cast to cast back from static_cast:" &lt;&lt; endl;
	Children* child_s = dynamic_cast&lt;Children*> (father_s);
	if (child_s)
	{
		child_s->Speak();
		child_s->Work();
	}
	else cout &lt;&lt; "\t[null]" &lt;&lt; endl;
	
    //cout&lt;&lt;typeid(stranger_r).name()&lt;&lt;endl;
    
	cout &lt;&lt; "use dynamic_cast to cast back from reinterpret_cast:" &lt;&lt; endl;
	Children* child_r = dynamic_cast&lt;Children*> (stranger_r);
	if (child_r)
	{
		child_r->Speak();
		child_r->Work();
	}
	else cout &lt;&lt; "\t[null]" &lt;&lt; endl;
	
	delete daughter_d;
	delete son_s;
	delete father_d;
	delete mother_s;
	
	return 0;
}

/********************* Result *********************/

//dynamic_cast from child class to base class:
//	I am Daughter who pretend to be my mother, I love my parents.
//	I am Daughter who pretend to be my mother, I need to work for my family.
//static_cast from child class to base class:
//	I am Son who pretend to be my father, I love my parents.
//	I am Son who pretend to be my father, I need to work for my family.
//
//dynamic_cast from base class to child class:
//	[null]
//static_cast from base class to child class:
//	I am Mother who pretend to be a my daugher, I love my children.
//	I am Mother who pretend to be a my daugher, I need to study for future.
//
//dynamic_cast to non-related class:
//	[null]
//reinterpret_cast to non-related class:
//	I am a stranger
//
//use dynamic_cast to cast back from static_cast:
//	I am Son who pretend to be my father, I love my parents.
//	I am Son who pretend to be my father, I need to work for my family.
//use dynamic_cast to cast back from reinterpret_cast:
//	[null]

                
                </textarea>
 <input type="hidden" name="original_codes" value="" id="Original_Codes_Text"/>           
            </td>
            
            <td width="300px" valign="top">
                
                <div id="Text_Wrapper_Area">
                    <input type="button" name="encode" value="HTML Encode" onclick="Find('encode');" id="prerequisite_encode" title="replace all '&lt;' with '&amp;lt;'"/>
                    <hr/>
                    <input type="button" name="quote" value="Quote" onclick="Find('quote');"  id="prerequisite_quote" title="match all characters in double quoter"/>
                    <hr/>
                    <input type="button" name="character" value="Character" onclick="Find('character');" title="match character in single quoter"/>
                    <hr/>
                    <input type="button" name="keyword" value="Keyword" onclick="Find('keyword');"/>
                    <hr/>
                    <input type="button" name="comment" value="Comment" onclick="Find('comment');"/>
                    <hr/>
                    <input type="button" name="preprocessor" value="Preprocessor" onclick="Find('preprocessor');"/>
                    <hr/>
                    <input type="button" name="function" value="Function" onclick="Find('function');" disabled = "disabled"/>
                    <hr/>
                    <input type="button" name="number" value="Number" onclick="Find('number');" disabled = "disabled"/>
                    <hr/>
                    <input type="button" name="stdlib" value="Standard Library Words" onclick="Find('stdlib');" />
                    
                </div>
                
                <div id="Quick_Action_Area">
                    <input type="button" name="quickview" value="View Coloring Immediately" onclick="QuickView();" />
                    <hr/>
                    <input type="button" name="restart" value="Restart Syntax Coloring" onclick="RestartColoring();" />
                </div>   
            </td>
        </tr>
    </table>
</fieldset>
   
    <fieldset>
        <legend>Code Style Presentation</legend>
        <input type="button" name="viewstyle" value="View Code Style" onclick="SetPresentation(GetCodesText(), true);" />
        <div>
            <pre>
                <code id="styling_presentation">
                    
                
                    
                </code>
            </pre>
        </div>
    </fieldset>

    <script type="text/javascript">   

       SetOriginalText(GetCodesText());

    </script>

<p>
    &copy;2011 Copyright <a href="http://about.me/ider" target="_blank">Ider Zheng</a>
</p>

</body>
</html>